#Given a rod of length n inches, and an array of prices that contain prices of all pieces
# of size <= n. Determine the max value obtainable by cutting up the rod and selling the pieces.

# Time Complexity = O(n ^ n)
# Auxiliary space used = O(n)
# Space Complexity
# O(n).
#
# Space used by input data = O(n).
#
# Space used by output data = O(1).
#
# Auxiliary space = O(n).
#
# Total space complexity = O(n).
def max_profit_recursion(n, prices):
    def dfs(i):
        if i == 0:
            return 0
        max_profit = -1
        for cut in range(1, i + 1):
            curr_profit = prices[cut] + dfs(i - cut)
            max_profit = max(max_profit, curr_profit)
        return max_profit
    return dfs(n)

# Time Complexity
# O(n^2).
# Auxiliary Space Used
# O(n).
# One dimensional array used for memoisation: O(n).
# The stack depth generated by recursion, same explanation for the recursive solution applies here: O(n).
# Space Complexity
# O(n).
#
# Space used by input data = O(n).
#
# Space used by output data = O(1).
#
# Auxiliary space = O(n).
#
# Total space complexity = O(n).
def max_profit_recursion_memoization(n, prices):
    memo = [-1] * (n + 1)
    def dfs(i):
        if i == 0:
            return 0

        if memo[i] != -1:
            return memo[i]
        max_profit = -1
        for cut in range(1, i + 1):
            curr_profit = prices[cut] + dfs(i - cut)
            max_profit = max(max_profit, curr_profit)
        memo[i] = max_profit
        return max_profit
    return dfs(n)

# Time complexity = O(n)
def max_profit_dp(n, prices):
    table = [0] * (n + 1)
    max_price = -1

    for i in range(1, n + 1):
        # curr_price = -1
        for j in range(1, i + 1):
            table[i] = max(table[i], prices[j] + table[i - j])
        # max_price = max(curr_price, max_price)
        # table[i] = max_price
    return table[n]

# print(max_profit_dp(1, [0, 2]) == 2)
# print(max_profit_dp(2, [0, 2, 3]) == 4)
# print(max_profit_dp(3, [0, 2, 3, 3]) == 6)
# print(max_profit_dp(4, [0, 2, 5, 7, 8]) == 10)
print(max_profit_dp(4,  [0, 1, 5, 8, 9]) == 10)

# print(max_profit_recursion_memoization(1, [0, 2]) == 2)
# print(max_profit_recursion_memoization(2, [0, 2, 3]) == 4)
# print(max_profit_recursion_memoization(3, [0, 2, 3, 3]) == 6)
# print(max_profit_recursion_memoization(4, [0, 2, 5, 7, 8]) == 10)
#
# print(max_profit_recursion(1, [0, 2]) == 2)
# print(max_profit_recursion(2, [0, 2, 3]) == 4)
# print(max_profit_recursion(3, [0, 2, 3, 3]) == 6)
# print(max_profit_recursion(4, [0, 2, 5, 7, 8]) == 10)

